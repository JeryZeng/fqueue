#summary One-sentence summary of this page.

= 协议介绍 =
    FQueue的协议基于Memcached协议。
== 入队 ==
{{{
add queuename_password[_其他任意字符] flags exptime <bytes>\r\n
<data block>\r\n
}}}
或者：
{{{
set queuename_password[_其他任意字符] flags exptime <bytes>\r\n
<data block>\r\n
}}}
[_其他任意字符]是可选的，对于最终的存储并不会有任何影响，在FQueue内部会自动忽略。比如：
{{{
add queuename_password_123333 flags exptime <bytes>\r\n
<data block>\r\n
}}}
通过使用增加后缀的方式，可以实现client根据key做hash，实现分布式。
== 出队 ==
{{{
get queuename_password\r\n
}}}
== 获取队列大小 ==
获取队列大小只需队列名，无需密码：
{{{
get size|queuename\r\n
}}}
==清空==
清空某个队列的所有数据：
{{{
get clear|queuename|password\r\n
}}}
==重新加载权限配置==
重新加载配置文件设置的权限信息：
{{{
get reload|queuename|password\r\n
}}}
只需要任何一个queuename,password即可。
==JVM监控信息==
获取可以监控JVM的监控信息
{{{
get monitor|items\r\n
}}}
items选项可以是
{{{
fileDescriptor,tomcat,load,allThreadsCount,peakThreadCount,daemonThreadCount,totalStartedThreadCount,deadLockCount,heapMemory,noHeapMemory,memory,classCount,GCTime,memoryPoolCollectionUsage,memoryPoolUsage,memoryPoolPeakUsage
}}}
==stats==
与memcached同
{{{
stats\r\n
}}}
= 关于性能 =

= 监控 =

= 高可用设计 =